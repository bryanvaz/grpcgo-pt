root = "."
testdata_dir = "testdata"
tmp_dir = "tmp"

[build]
  # Just plain old shell command. You could use `make` as well.
  cmd = "go build -o ./tmp/server src/cmd/server/server.go"
  # Binary file yields from `cmd`.
  bin = "tmp/server"
  # Customize binary, can setup environment variables when run your app.
  full_bin = "./tmp/server"
  # Watch these filename extensions.
  include_ext = ["js", "mjs", "css", "go", "tpl", "tmpl", "html", "less"]
  # Ignore these filename extensions or directories.
  exclude_dir = ["assets", "tmp", "vendor", "testdata", "frontend/node_modules", "node_modules"]
  # Watch these directories if you specified.
  include_dir = []
  # Watch these files.
  include_file = []
  # Exclude files.
  exclude_file = []
  # Exclude specific regular expressions.
  exclude_regex = ["_test\\.go"]
  # Exclude unchanged files.
  exclude_unchanged = true
  # Follow symlink for directories
  follow_symlink = true
  # This log file places in your tmp_dir.
  log = "air-build-errors.log"
  # Poll files for changes instead of using fsnotify.
  poll = false
  # Poll interval (defaults to the minimum interval of 500ms).
  poll_interval = 500 # ms
  # It's not necessary to trigger build each time file changes if it's too frequent.
  delay = 500 # ms
  # Stop running old binary when build errors occur.
  stop_on_error = true
  # Send Interrupt signal before killing process (windows does not support this feature)
  send_interrupt = true
  # Delay after sending Interrupt signal
  kill_delay = 5000 # ms
  # Rerun binary or not
  rerun = false
  # Delay after each executions
  rerun_delay = 500
  # Add additional arguments when running binary (bin/full_bin). Will run './tmp/main hello world'.
  args_bin = []

[color]
  app = ""
  build = "yellow"
  main = "magenta"
  runner = "green"
  watcher = "cyan"

[log]
  main_only = false
  time = false

[misc]
  clean_on_exit = false

[screen]
  clear_on_rebuild = false
  keep_scroll = true
